: two-drop ( x y -- ) drop drop ;
: slip ( quote x -- x ) >r call r> ;
: dip ( x quote -- x ) swap slip ;
: nip ( x y -- y ) swap drop ;
: two-apply ( x y quote -- x' y' ) dup >r dip r> call ;
: over ( x y -- x y x ) >r dup r> swap ;
: keep ( x quote -- x ) over slip ;
: bi ( x quote quote -- x' x'' ) >r keep r> call ;
: two-dup ( x y -- x y x y ) over over ;
: map ( sequence quote -- sequence' )
    over [ ] eq [ two-drop [ ] ] [
        dup >r over list-head >r [ list-tail ] dip map
        r> r> call swap curry
    ] if ;
: = ( x y -- ? ) two-dup eq [
        two-drop t
    ] [
        two-dup [ type-tag ] two-apply eq [
            dup list? [
                two-dup [ list-head ] two-apply
                = [ [ list-tail ] two-apply = ] [ two-drop f ] if
            ] [
                dup string? [ string= ] [ eq ] if
            ] if
        ] [
            two-drop f
        ] if
    ] if ;
: (factorial) ( n!/m! m -- n! )
    dup 1 eq [ drop ] [ [ * ] keep 1 - (factorial) ] if ;
: factorial ( n -- n! ) 1 swap (factorial) ;
: (reverse) ( acc rest -- sequence ) dup [ ] eq [ drop ] [
        [ list-head ] [ list-tail ] bi [ swap curry ] dip (reverse)
    ] if ;
: reverse ( sequence -- sequence' ) [ ] swap (reverse) ;
